Index: hachoir/parser/program/python.py
===================================================================
--- hachoir/parser/program/python.py	(révision 882)
+++ hachoir/parser/program/python.py	(copie de travail)
@@ -238,9 +238,9 @@
 
     # Dictionnary which associate the pyc signature (4-byte long string)
     # to a Python version string (eg. "m\xf2\r\n" => "2.4b1")
-    STR_MAGIC = dict( \
+    STR_MAGIC = dict([ \
         (long2raw(magic | (ord('\r')<<16) | (ord('\n')<<24), LITTLE_ENDIAN), value[0]) \
-        for magic, value in MAGIC.iteritems())
+        for magic, value in MAGIC.iteritems()])
 
     def validate(self):
         signature = self.stream.readBits(0, 16, self.endian)
Index: hachoir/parser/audio/au.py
===================================================================
--- hachoir/parser/audio/au.py	(révision 923)
+++ hachoir/parser/audio/au.py	(copie de travail)
@@ -31,8 +31,8 @@
     }
 
     # Create bit rate and codec name dictionnaries
-    bit_rate = dict( (key, value[0]) for key,value in codec_info.iteritems() )
-    codec_name = dict( (key, value[1]) for key,value in codec_info.iteritems() )
+    bit_rate = dict([ (key, value[0]) for key,value in codec_info.iteritems() ])
+    codec_name = dict([ (key, value[1]) for key,value in codec_info.iteritems() ])
 
     def validate(self):
         if self.stream.readBytes(0, 4) != ".snd":
Index: hachoir/field/static_field_set.py
===================================================================
--- hachoir/field/static_field_set.py	(révision 872)
+++ hachoir/field/static_field_set.py	(copie de travail)
@@ -23,7 +23,6 @@
             cls.static_size = cls._computeStaticSize()
         return object.__new__(cls, *args, **kw)
 
-    @staticmethod
     def _computeItemSize(item):
         item_class = item[0]
         if item_class.static_size is None:
@@ -37,6 +36,7 @@
         else:
             assert isinstance(item_class.static_size, (int, long))
             return item_class.static_size
+    _computeItemSize = staticmethod(_computeItemSize)
 
     def createFields(self):
         for item in self.format:
@@ -45,7 +45,7 @@
             else:
                 yield item[0](self, *item[1:])
 
-    @classmethod
     def _computeStaticSize(cls):
-        return sum(cls._computeItemSize(item) for item in cls.format)
+        return sum([cls._computeItemSize(item) for item in cls.format])
+    _computeStaticSize = classmethod(_computeStaticSize)
 
Index: hachoir/parser/__init__.py
===================================================================
--- hachoir/parser/__init__.py	(révision 961)
+++ hachoir/parser/__init__.py	(copie de travail)
@@ -1,3 +1,3 @@
 from hachoir.parser import (archive, audio, container,
-    file_system, image, misc, office, program, video)
+    file_system, image, misc, program, video)
 
