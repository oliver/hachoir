#!/usr/bin/env python2.4
from hachoir_core.error import error
from hachoir_core.cmd_line import (getHachoirOptions,
    configureHachoir, unicodeFilename)
from hachoir_core.stream import InputStreamError, FileInputStream
from hachoir_core.i18n import _
from hachoir_parser import createParser, parseStream, HachoirParserList
from hachoir_urwid import exploreFieldSet
from optparse import OptionGroup, OptionParser
import sys

def displayVersion(*args):
    import hachoir_core
    import hachoir_urwid
    print _("Hachoir urwid version %s") % hachoir_urwid.__version__
    print _("Hachoir library version %s") % hachoir_core.__version__
    print
    print _("Website: %s/wiki/hachoir-urwid") % hachoir_core.WEBSITE
    sys.exit(0)

def displayParserList(*args):
    HachoirParserList().print_()
    sys.exit(0)

def parseOptions():
    parser = OptionParser(usage="%prog [options] filename")

    common = OptionGroup(parser, "Urwid", _("Option of urwid explorer"))
    common.add_option("--preload", help=_("Number of fields to preload at each read"),
        type="int", action="store", default=3)
    common.add_option("--path", help=_("Initial path to focus on"),
        type="str", action="store", default=None)
    common.add_option("--parser", help=_("Use the specified parser (use its identifier)"),
        type="str", action="store", default=None)
    common.add_option("--offset", help=_("Skip first bytes of input file"),
        type="long", action="store", default=None)
    common.add_option("--parser-list",help=_("List all parsers then exit"),
        action="callback", callback=displayParserList)
    common.add_option("--profiler", help=_("Run profiler"),
        action="store_true", default=False)
    common.add_option("--profile-display", help=_("Force update of the screen beetween each event"),
        action="store_true", default=False)
    common.add_option("--size", help=_("Maximum size of bytes of input file"),
        type="long", action="store", default=None)
    common.add_option("--version", help=_("Display version and exit"),
        action="callback", callback=displayVersion)
    parser.add_option_group(common)

    hachoir = getHachoirOptions(parser)
    parser.add_option_group(hachoir)

    values, arguments = parser.parse_args()
    if len(arguments) != 1:
        parser.print_help()
        sys.exit(1)
    return values, arguments[0]

def runProfiler(*args):
    import hotshot, hotshot.stats
    from os import unlink
    profile_filename = "/tmp/hachoir-urwid.hotshot"
    prof = hotshot.Profile(profile_filename)
    try:
        print "[+] Run profiler"
        prof.runcall(*args)
        prof.close()
        print "[+] Stop profiler"
        print "[+] Process data..."
        stat = hotshot.stats.load(profile_filename)
        print "[+] Strip..."
        stat.strip_dirs()
        print "[+] Sort data..."
        stat.sort_stats('time', 'calls')
        print
        print "[+] Display statistics"
        print
        stat.print_stats(50)
    finally:
        unlink(profile_filename)

def openParser(parser_id, filename, offset, size):
    try:
        filename, realname = unicodeFilename(filename), filename
        if parser_id:
            try:
                parser_cls = HachoirParserList()[parser_id]
            except KeyError:
                error(_("No parser with identifier: %s") % parser_id)
                sys.exit(1)
            stream = FileInputStream(filename, real_filename=realname)
            # TODO: Use offset and size
            return parseStream(parser_cls, stream, False)
        else:
            parser = createParser(filename,
                offset=offset, size=size, real_filename=realname)
    except InputStreamError, err:
        return None, _("Unable to open file: %s") % err
    if not parser:
        return None, _("Unable to parse file: %s") % filename
    return parser, ""

def main():
    # Parser options and initialize Hachoir
    values, filename = parseOptions()
    configureHachoir(values)

    # Open file and create parser
    parser, err = openParser(values.parser, filename, values.offset, values.size)
    if err:
        print err
        sys.exit(1)

    # Explore file
    if values.profiler:
        ok = runProfiler(exploreFieldSet, parser, values)
    else:
        exploreFieldSet(parser, values)

if __name__ == "__main__":
    main()

